from utils.llm_client import LLMClient
from utils.memory_store import MemoryStore
import os
import json
import re

class CodeGenerationAgent:
    def __init__(self, project_name=None):
        self.llm_client = LLMClient()
        self.memory_store = MemoryStore()
        self.project_name = self._sanitize_project_name(project_name) if project_name else 'default'
        self.output_dir = os.path.join('output', self.project_name, 'src')

    def _sanitize_project_name(self, name):
        # Remove any characters that aren't alphanumeric, underscore, or hyphen
        sanitized = re.sub(r'[^a-zA-Z0-9_-]', '', name)
        return sanitized or 'default'

    def generate_code(self):
        architecture_json = self.memory_store.retrieve('architecture')
        architecture = json.loads(architecture_json)
        components = architecture.get('modules', [])
        
        # Create project-specific directory structure
        os.makedirs(self.output_dir, exist_ok=True)
        
        # Create a README.md for the project
        self._create_project_readme()
        
        for component in components:
            self.generate_component_code(component)

    def _create_project_readme(self):
        readme_content = f"""# {self.project_name}

This code was automatically generated by the AI Code Generation System.

## Structure
The generated code is organized in the following structure:

```
src/
  ├── [Component files]
```

## Components
The following components were generated based on the provided requirements and architecture:

{self._get_component_list()}
"""
        readme_path = os.path.join('output', self.project_name, 'README.md')
        with open(readme_path, 'w') as f:
            f.write(readme_content)

    def _get_component_list(self):
        try:
            architecture_json = self.memory_store.retrieve('architecture')
            architecture = json.loads(architecture_json)
            components = architecture.get('modules', [])
            return '\n'.join(f'- {component["name"]}: {component["description"]}' 
                           for component in components)
        except:
            return 'No components information available'

    def generate_component_code(self, component):
        prompt = (
            f"You are a senior software developer. Write the complete source code for the following module.\n\n"
            f"Module Name: {component['name']}\n"
            f"Description: {component['description']}\n"
            f"Dependencies: {', '.join(component.get('dependencies', []))}\n\n"
            "Ensure the code is well-documented with comments, follows best practices, and includes necessary imports. "
            "Provide the code in Python, and do not include any explanations or additional text."
        )
        code = self.llm_client.generate_response(prompt)
        file_name = component['file_name']
        file_path = os.path.join(self.output_dir, file_name)
        with open(file_path, 'w') as file:
            file.write(code)
        self.memory_store.save(f'code_{component["name"]}', code)
